plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '4.0.4'
    id "de.undercouch.download" version "4.1.1"
}

repositories {
    mavenCentral()
    maven {
        url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://repo.codemc.org/repository/maven-public/"
    }
    maven {
        url = "https://repo.aikar.co/content/groups/aikar/"
    }
    maven {
        url = 'http://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url "https://repo.dmulloy2.net/nexus/repository/public/"
    }
    maven {
        url "http://mvn.lumine.io/repository/maven-releases/"
    }
}

group = 'cz.neumimto.rpg'
version = '2.1.0-SNAPSHOT-13'

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}

dependencies {
    annotationProcessor project(':Generator')
    compile project(':Common')
    compile project(':FlatFiles-Persistence')

    compile ('com.google.inject:guice:4.1.0') {
        exclude group: "com.google.guava", module: "guava"
    }
    compile 'org.slf4j:slf4j-api:1.7.30'
    compile "co.aikar:acf-paper:0.5.0-SNAPSHOT"
// https://mvnrepository.com/artifact/com.google.guava/guava
    compileOnly group: 'com.google.guava', name: 'guava', version: '21.0'


    // compileOnly fileTree(dir: 'lib', include: '*.jar')
    compile fileTree(dir: 'lib-cp', include: '*.jar')

    compileOnly 'it.unimi.dsi:fastutil:8.2.1'

    compileOnly "org.spigotmc:spigot-api:1.16.4-R0.1-SNAPSHOT"
    annotationProcessor("org.spigotmc:plugin-annotations:1.2.2-SNAPSHOT")

    compileOnly ("org.spigotmc:plugin-annotations:1.2.2-SNAPSHOT"){
        exclude group: "org.bukkit", module: "bukkit"
    }

    compileOnly (group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.6.0-SNAPSHOT") {
        exclude group: "com.comphenix.executors", module: "BukkitExecutors"
    }
    //compileOnly 'com.github.dmulloy2:ProtocolLib:master'
    compileOnly 'de.tr7zw:item-nbt-api-plugin:2.2.0'
    compileOnly 'com.github.Slikey:EffectLib:d77f639038'
    compileOnly 'me.clip:placeholderapi:2.10.3'
    compileOnly 'com.gmail.filoghost.holographicdisplays:holographicdisplays-api:2.4.0'
    compileOnly('net.Indyuce:MMOItems:6.2.4') {
        exclude group: 'com.mojang', module: 'authlib'
    }
    compileOnly('net.Indyuce:MMOLib:1.4.0') {
        exclude group: "org.slf4j", module: "slf4j"
    }
    compileOnly 'io.lumine.xikage:MythicMobs:4.9.1'
    compileOnly 'com.gitlab.SamB440:RPGRegions-2:9e46ca8d' // 1.3.5

    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'

    testCompile ('com.github.NeumimTo:MockBukkit:e92bb7bbd1') {
        exclude group: "org.spigotmc", module: "spigot-api"
        exclude group: "org.jetbrains", module: "annotations"
    }
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.1'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.4.1'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.1'

    jar {
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }

        exclude("**/*.DSA", "**/*.SF", "**/*pom.xml", "**/*pom.properties")
        libsDirName = '../../../server-spigot/plugins'
        archiveName("NT-RPG-Spigot-16.x-" + version + ".jar")
    }



    configurations {
        testCompile.extendsFrom compileOnly
    }

    sourceSets {
        test.compileClasspath += configurations.compileOnly
        test.runtimeClasspath += configurations.compileOnly
    }
}

test {
    dependsOn jar
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile) + configurations.compileOnly

    useJUnitPlatform()
}

shadowJar {
    classifier = null

//    relocate 'co.aikar.commands', 'cz.neumimto.acf'
    exclude '**/module-info.class'
}

build.dependsOn shadowJar

//task deploy {
//    copy {
//        from "${buildDir}/${jar.archiveName()}"
//        into new File((String)System.getenv("RPG_DEPLOY_DIR"))
//    }
//}